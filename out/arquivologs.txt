# -=============================================== @BoT Event das logs do bot/ quando o bot liga e tals


bot_logs_channel_id = 1202613923510091776
log_directory = './logs'
bot_errors_log = f"{log_directory}/errorlogs.log"
os.makedirs(log_directory, exist_ok=True)

log_colors = {
    "join": discord.Color.green(),
    "leave": discord.Color.red(),
    "command": discord.Color.blue(),
    "response": discord.Color.gold(),
    "error": discord.Color.red(),
    "dm": discord.Color.purple(),
    "info": discord.Color.default()
}

timezone = datetime.now().astimezone().tzinfo


@bot.event
async def on_command(ctx):
    command_info = {
        "author": {
            "name": ctx.author.name,
            "id": ctx.author.id,
            "avatar_url": str(ctx.author.avatar.url)
        },
        "guild": {
            "name": ctx.guild.name,
            "id": ctx.guild.id,
            "icon_url": str(ctx.guild.icon.url) if ctx.guild.icon else "Sem ícone"
        },
        "channel": {
            "name": ctx.channel.name,
            "id": ctx.channel.id,
            "mention": ctx.channel.mention
        },
        "message": {
            "content": ctx.message.content,
            "id": ctx.message.id,
            "link": f"https://discord.com/channels/{ctx.guild.id}/{ctx.channel.id}/{ctx.message.id}"
        },
        "timestamp": datetime.now(timezone).isoformat()
    }
    
    file_path = './on_command/on_command.json'
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    try:
        
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
        else:
            data = []
        
        
        data.append(command_info)
        
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        
    except json.JSONDecodeError:
        ic(f'Arquivo JSON corrompido, reiniciando com uma nova lista. Comando executado por: {ctx.author.name}')  
        data = [command_info]
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        ic(f'Erro ao salvar informações do comando executado por {ctx.author.name}: {e}')  

    print(f'[!] {ctx.author} :: {ctx.message.content}')


@bot.event
async def on_guild_remove(guild):
    guild_info = {
        "name": guild.name,
        "id": guild.id,
        "member_count": guild.member_count,
        "icon_url": str(guild.icon.url) if guild.icon else "Sem ícone"
    }
    
    file_path = './on_guild_remove/on_guild_remove.json'
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    try:
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
        else:
            data = []
        
        data.append(guild_info)
        
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        
    except json.JSONDecodeError:
        ic(f'Arquivo JSON corrompido, reiniciando com uma nova lista. Guilda removida: {guild.name}')  
        data = [guild_info]
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        ic(f'Erro ao salvar informações da guilda removida {guild.name}: {e}')  



@bot.event
async def on_command_completion(ctx):
    response_text = ctx.message.content.replace(f'A.{ctx.command.name}', '').strip()
    message_link = f"https://discord.com/channels/{ctx.guild.id}/{ctx.channel.id}/{ctx.message.id}"
    
    response_info = {
        "author": {
            "name": ctx.author.name,
            "id": ctx.author.id,
            "avatar_url": str(ctx.author.avatar.url)
        },
        "guild": {
            "name": ctx.guild.name,
            "id": ctx.guild.id,
            "icon_url": str(ctx.guild.icon.url) if ctx.guild.icon else "Sem ícone"
        },
        "channel": {
            "name": ctx.channel.name,
            "id": ctx.channel.id,
            "mention": ctx.channel.mention
        },
        "message": {
            "content": ctx.message.content,
            "id": ctx.message.id,
            "link": message_link
        },
        "response_text": response_text,
        "timestamp": datetime.now(timezone).isoformat()
    }

    file_path = './on_command_completion/on_command_completion.json'
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    try:
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
        else:
            data = []
        
        data.append(response_info)
        
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        
    except json.JSONDecodeError:
        ic(f'Arquivo JSON corrompido, reiniciando com uma nova lista. Resposta ao comando executado por: {ctx.author.name}') 
        data = [response_info]
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        ic(f'Erro ao salvar informações da resposta ao comando executado por {ctx.author.name}: {e}') 


@bot.event
async def on_command_error(ctx, error):
    if bot_logs_channel_id:
        bot_logs_channel = bot.get_channel(bot_logs_channel_id)
        if bot_logs_channel:
            error_name = type(error).__name__
            error_details = str(error)
            timestamp = datetime.now(timezone).strftime("%Y-%m-%d %H:%M:%S")
            
            with open(bot_errors_log, "a") as log_file:
                log_file.write(f"Timestamp: {timestamp}\n"
                               f"Server: {ctx.guild.name} ({ctx.guild.id})\n"
                               f"Channel: {ctx.channel.name} ({ctx.channel.id})\n"
                               f"User: {ctx.author.name} ({ctx.author.id})\n"
                               f"Command: {ctx.message.content}\n"
                               f"Error: {error_name}: {error_details}\n\n")
            
            print(f"Erro ao executar comando por {ctx.author} no servidor {ctx.guild.name}")

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if isinstance(message.channel, discord.DMChannel):
        message_info = {
            "author": {
                "name": message.author.name,
                "id": message.author.id,
                "avatar_url": str(message.author.avatar.url)
            },
            "message": {
                "content": message.content,
                "id": message.id,
                "timestamp": message.created_at.astimezone(timezone).isoformat()
            },
            "attachments": [
                {"url": attachment.url, "filename": attachment.filename}
                for attachment in message.attachments
            ],
            "shared_guilds": [
                guild.name for guild in bot.guilds if guild.get_member(message.author.id)
            ],
            "timestamp": datetime.now(timezone).isoformat()
        }

        file_path = './on_message/on_message.json'
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        try:
            if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                with open(file_path, 'r', encoding='utf-8') as file:
                    data = json.load(file)
            else:
                data = []

            data.append(message_info)

            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, indent=4, ensure_ascii=False)

            print(f'Informações da mensagem recebida de {message.author.name} salvas com sucesso.') 
        except json.JSONDecodeError:
            ic(f'Arquivo JSON corrompido, reiniciando com uma nova lista. Mensagem recebida de: {message.author.name}')  
            data = [message_info]
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, indent=4, ensure_ascii=False)
        except Exception as e:
            ic(f'Erro ao salvar informações da mensagem recebida de {message.author.name}: {e}') 

    await bot.process_commands(message)


@bot.event
async def on_ready():
    print(banner_quando_liga_fds)
    pode_nao_man()

    if bot_logs_channel_id:
        bot_logs_channel = bot.get_channel(bot_logs_channel_id)
        if bot_logs_channel:
            guild_count = len(bot.guilds)
            member_count = sum([guild.member_count for guild in bot.guilds])
            command_count = len(bot.commands)

            embed = discord.Embed(
                title="Bot Reiniciado",
                description="O bot foi reiniciado e está pronto para uso.",
                color=log_colors["info"],
                timestamp=datetime.now(timezone)
            )
            embed.add_field(name="Nome do Bot", value=bot.user.name, inline=False)
            embed.add_field(name="ID do Bot", value=bot.user.id, inline=False)
            embed.add_field(name="Servidores Conectados", value=f"{guild_count} servidores", inline=False)
            embed.add_field(name="Membros Conectados", value=f"{member_count} membros", inline=False)
            embed.add_field(name="Quantidade de Comandos", value=f"{command_count} comandos", inline=False)
            embed.set_thumbnail(url=bot.user.avatar.url)
            
            await bot_logs_channel.send(embed=embed)
            try:
                synced = await bot.tree.sync()
                print(f'Sincronizados {len(synced)} comandos')
            except Exception as e:
                print(e)

    guild = discord.utils.get(bot.guilds, id=1201687455527342091)
    if guild is None:
        print("Servidor não encontrado.")
        return

    voice_channel = discord.utils.get(guild.voice_channels, id=1267582290301550644)
    if voice_channel is None:
        print("Canal de voz não encontrado.")
        return

    await voice_channel.edit(name=f"STATUS L1 BOT {'🟢' if bot.is_ready() else '🔴'}")

    async def update_voice_channel_status():
        while True:
            await voice_channel.edit(name=f"STATUS L1 BOT {'🟢' if bot.is_ready() else '🔴'}")
            await asyncio.sleep(60)  

    bot.loop.create_task(update_voice_channel_status())

    await update_presence()
    await monitor_resources()


async def monitor_resources():
    bot_logs_channel = bot.get_channel(bot_logs_channel_id)
    if bot_logs_channel:
        while not bot.is_closed():
            cpu_percent = psutil.cpu_percent(interval=1)
            mem_percent = psutil.virtual_memory().percent
            disk_percent = psutil.disk_usage('/').percent
            cpu_temp = get_cpu_temperature()
            gpu_usage, gpu_temp = get_gpu_usage_and_temp()
            ping = round(bot.latency * 1000)

            embed = discord.Embed(
                title="Monitoramento de Recursos",
                description="Atualização de uso de CPU, Memória, Disco, Temperatura do Host e Ping",
                color=log_colors["info"],
                timestamp=datetime.now(timezone)
            )
            embed.add_field(name="Uso de CPU", value=f"{cpu_percent:.2f}%", inline=True)
            embed.add_field(name="Temperatura da CPU", value=f"{cpu_temp}°C", inline=True)
            embed.add_field(name="Uso de Memória", value=f"{mem_percent:.2f}%", inline=True)
            embed.add_field(name="Uso de Disco", value=f"{disk_percent:.2f}%", inline=True)
            embed.add_field(name="Uso da GPU", value=f"{gpu_usage}%" if gpu_usage != "N/A" else "N/A", inline=True)
            embed.add_field(name="Temperatura da GPU", value=f"{gpu_temp}°C" if gpu_temp != "N/A" else "N/A", inline=True)
            embed.add_field(name="Ping do Bot", value=f"{ping} ms", inline=True)
            embed.set_thumbnail(url="https://cdn.discordapp.com/app-icons/1215660441909465088/a17fa7665b1a81bea28b023ab7df3248.png") 
            embed.set_footer(text="Atualizado a cada 5 horas")

            await bot_logs_channel.send(embed=embed)
            await asyncio.sleep(18000)

def get_cpu_temperature():
    try:
        if psutil.sensors_temperatures():
            temperatures = psutil.sensors_temperatures()
            if 'coretemp' in temperatures:
                return temperatures['coretemp'][0].current
            elif 'cpu_thermal' in temperatures:
                return temperatures['cpu_thermal'][0].current
    except Exception:
        pass
    return "N/A"


def get_gpu_usage_and_temp():
    try:
        import GPUtil
        gpus = GPUtil.getGPUs()
        if gpus:
            gpu = gpus[0]
            return gpu.load * 100, gpu.temperature
    except Exception:
        pass
    return "N/A", "N/A"

async def update_presence():
    activity = discord.Streaming(name="lalaio1.github.io", url="https://www.twitch.tv/lalaio1_bot")  
    await bot.change_presence(status=discord.Status.dnd, activity=activity) 

GAME_NAME = "lalaio1.github.io"
RICH_PRESENCE_INVITE_IMAGE_URL = "https://cdn.discordapp.com/app-icons/1215660441909465088/a17fa7665b1a81bea28b023ab7df3248.png"




caminho_arquivo = './conf/token.L1'
token = ler_token(caminho_arquivo)
bot.run(token)
